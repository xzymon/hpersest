Explanation of some properties in POM file:
 - webserver.systempath is path used by "mvn war:war" plugin to output generated WAR file (and intentionally Tomcat7 webapps directory)

Przy wykonywaniu UPDATE Categories jak i Stores pojawia się błąd (WELD nie może zamknąć sesji Hibernate (?)).
Wcześniej, gdy było to zaimplementowane tylko dla Stores nie było takiego błędu.
 -> Spróbować wycofać zmiany i sprawdzić czy gdy aplikacja będzie realizowała UPDATE tylko dla Stores czy będzie się udawać.
 

0.0.2-SNAPSHOT1 (albo SNAPSHOT2?)
Analiza problemu:
Weld nie może wykonać session.close() ponieważ nie ma dostępu do session.
Session jest pobierany z FacesContext, a FacesContext daje null.

Możliwe rozwiązania: 
  Ustalić: Dlaczego FacesContext jest null przy próbie wykonania update?
  Czy da się dobrać do ServletContext bez pośrednictwa FacesContext ? 

Po ustawieniu bezpośredniego wstrzykiwania ServletContext zamiast FacesContext problem zamykania Session został rozwiązany.

Jednakże po usunięciu powyższego problemu nie działa update, nie ma też żadnej informacji o wyjątkach.
Po prostu nic się nie dzieje.

Chyba przy wykorzystaniu beana @RequestScoped po prostu trzeba zrobić oddzielnie widok create i oddzielnie widok update (bezwarunkowo renderujący id edytowanego obiektu)
 -> tak, to rozwiązanie działa.
 W wypadku warunkowego renderowania komponenetu przechowującego id problemem była "cykliczna" zależność w komponencie:
 	<h:inputHidden value="#{storeBean.store.id}" rendered="#{storeBean.store.id ne null}"/> 
  - wyrenderowanie (->również przy odtwarzaniu) komponentu przechowującego id było zależne od obecności wartości id w backing bean
  omówienie szczegółowe obu przypadków:
  	przypadek 1: wybranie update'u wiersza powodujące nawigację z stores do stores-create
  		formularz w stores przekazuje backing beana z wypełnioną wartością id do widoku stores-create
  		zatem w momencie renderowania widoku wartość id jest znana (!null) zatem komponent spełnia warunek renderowania i zostaje wyrenderowany
  		strona zostaje wyrenderowana zgodnie z założeniami jako strona dla przypadku update
  	przypadek 2: kliknięcie przyciska update na stronie stores-create, wymagające odtworzenia widoku stores-create a potem podjęcia decyzji o dalszej nawigacji i logice
  		formularz przesyła parametry, włącznie z id, na potrzeby odtworzenia widoku
  		RESTORE_VIEW odbudowa drzewa widoku (odbudowa jest na podstawie pliku widoku XHTML? - więc odtwarza wszystkie komponenty)
  		APPLY_REQUEST_PARAMETERS parametry są wpuszczane do drzewa i rozsyłane do komponentów w drzewie
  		PROCESS_VALIDATIONS - nieistotne
  		UPDATE_MODEL_VALUES - przesłanie danych z komponentów do widoku - z jakiegoś powodu powyższy komponent nie wysyła wartości (->id) do backing beana - może poprostu jej nie otrzymał
  		INVOKE_APPLICATION - tu powinna być wywołana akcja klikniętego commandButtona - jednakże kliknięty commandButton nie może być odtworzony (backingBean.id jest null) co oznacza że polecenie trafia w próżnię (-> navigation dostaje null) i poprostu widok musi być jeszcze raz wygenerowany 
  		RENDER_RESPONSE - renderuje widok tak jakby renderowany miał być create, a nie update
  		

Problem 1: co jest lepsze - przechowywać w controlerze (widoku) referencję do klasy modelu, czy skopiować pola klasy modelu do kontrolera i przed przenoszeniem do bazy kopiować stan na klasę modelu ? Dlaczego ?
 [jak na to zareaguje mechanizm BeanValidation ?]
 
Problem 2: gdy w jednym request występuje kilka CDI beanów, a każdy bean posiada metodę @PreDestroy closeSession() to pierwszy zniszczony bean zamknie Session z hibernate a następne beany będą rzucać wyjątek że już nie ma Session

Problem 3: formularze wysyłają do bazy dane bez polskich znaków - tzn. zamiast znaku polskiego wysyłane jest '?'
			przy czym wygląda na to że problem jest na linii Hibernate-baza danych. PersistenceContext na pewno otrzymuje dane przynajmniej wyglądające jak znaki polskie
			 - dane pobrane z cache'a pierwszego poziomu podczas requesta wstawiającego zawierają polskie znaki - może winą jest inny encoding w javie a inny w bazie ?
		- na pewno problemu nie rozwiązuje zmiana typu dokumentu z DOCTYPE na xml
Rozwiązanie problemu 3: trzeba nakazać Hibernate komunikaję z bazą danych z zastosowaniem utf8
 - do pliku konfiguracyjnego Hibernate należy dodać linie:
	<property name="hibernate.connection.CharSet">utf8</property>
	<property name="hibernate.connection.characterEncoding">utf8</property>
	<property name="hibernate.connection.useUnicode">true</property>
	
		 